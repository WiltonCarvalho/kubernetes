# https://learn.microsoft.com/en-us/azure/aks/deploy-valkey-cluster
---
apiVersion: v1
kind: Secret
metadata:
  name: valkey-pass
  namespace: valkey
type: Opaque
stringData:
  # openssl rand -base64 32
  REDISCLI_AUTH: of1i7teWchAD1Z0vcE6RA30mvW1OJw+2GQtk8JZrYq0=
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: valkey-masters
  namespace: valkey
spec:
  serviceName: "valkey-masters"
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: valkey
  template:
    metadata:
      labels:
        app: valkey
        appCluster: valkey-masters
    spec:
      terminationGracePeriodSeconds: 20
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  appCluster: "valkey-masters"
              topologyKey: kubernetes.io/hostname
            weight: 5
      volumes:
        - name: tls
          secret:
            secretName: valkey-tls
      containers:
      - name: valkey
        image: "valkey/valkey:7-alpine"
        envFrom:
        - secretRef:
            name: valkey-pass
        env:
        - name: TZ
          value: America/Sao_Paulo
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_INDEX
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
        - name: SLAVE_REPLICA
          value: valkey-replicas-$(POD_INDEX).valkey-replicas.valkey.svc.cluster.local
        args:
        - valkey-server
        - --save 60 1
        - --loglevel notice
        - --dir /data
        - --port 0
        - --tls-port 6379
        - --tls-cert-file /tls/valkey.crt
        - --tls-key-file /tls/valkey.key
        - --tls-ca-cert-file /tls/ca.crt
        - --tls-auth-clients no
        - --tls-replication yes
        - --tls-cluster yes
        - --cluster-enabled yes
        #- --cluster-announce-ip $(POD_IP)
        - --cluster-announce-hostname $(POD_NAME).valkey-masters.valkey.svc.cluster.local
        - --cluster-config-file /data/nodes.conf
        - --cluster-node-timeout 15000
        - --appendonly yes
        - --requirepass $(REDISCLI_AUTH)
        - --masterauth $(REDISCLI_AUTH)
        # TODO: https://redis.io/docs/latest/operate/oss_and_stack/management/scaling/
        # - --cluster-migration-barrier
        # - --cluster-slave-validity-factor
        # - --cluster-require-full-coverage
        # - --cluster-allow-reads-when-down
        lifecycle:
          postStart:
            exec:
              command:
              - sh
              - -c
              - |
                role=$(valkey-cli --tls --cacert /tls/ca.crt role | awk '{print $1; exit}')
                while [ "$role" = "slave" ]; do
                  valkey-cli --tls --cacert /tls/ca.crt cluster failover
                  sleep 5
                  role=$(valkey-cli --tls --cacert /tls/ca.crt role | awk '{print $1; exit}')
                done
          preStop:
            exec:
              command:
              - sh
              - -c
              - |
                role=$(valkey-cli --tls --cacert /tls/ca.crt -h $SLAVE_REPLICA role | awk '{print $1; exit}')
                while [ "$role" = "slave" ]; do
                  valkey-cli --tls --cacert /tls/ca.crt -h $SLAVE_REPLICA cluster failover
                  sleep 5
                  role=$(valkey-cli --tls --cacert /tls/ca.crt -h $SLAVE_REPLICA role | awk '{print $1; exit}')
                done
        resources:
          requests:
            cpu: "100m"
            memory: "100Mi"
        ports:
        - name: valkey
          containerPort: 6379
          protocol: "TCP"
        - name: cluster
          containerPort: 16379
          protocol: "TCP"
        volumeMounts:
        - name: data
          mountPath: /data
          readOnly: false
        - name: tls
          mountPath: /tls/ca.crt
          subPath: "ca.crt"
          readOnly: true
        - name: tls
          mountPath: /tls/valkey.crt
          subPath: "valkey.crt"
          readOnly: true
        - name: tls
          mountPath: /tls/valkey.key
          subPath: "valkey.key"
          readOnly: true
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - exec valkey-cli --tls --cacert /tls/ca.crt ping
          failureThreshold: 10
          initialDelaySeconds: 10
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec valkey-cli --tls --cacert /tls/ca.crt ping
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec valkey-cli --tls --cacert /tls/ca.crt ping
      volumes:
        - name: tls
          secret:
            secretName: valkey-tls
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: valkey-replicas
  namespace: valkey
spec:
  serviceName: "valkey-replicas"
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: valkey
  template:
    metadata:
      labels:
        app: valkey
        appCluster: valkey-replicas
    spec:
      terminationGracePeriodSeconds: 20
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  appCluster: "valkey-replicas"
              topologyKey: kubernetes.io/hostname
            weight: 5
      volumes:
        - name: tls
          secret:
            secretName: valkey-tls
      containers:
      - name: valkey
        image: "valkey/valkey:7-alpine"
        envFrom:
        - secretRef:
            name: valkey-pass
        env:
        - name: TZ
          value: America/Sao_Paulo
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        args:
        - valkey-server
        - --save 60 1
        - --loglevel notice
        - --dir /data
        - --port 0
        - --tls-port 6379
        - --tls-cert-file /tls/valkey.crt
        - --tls-key-file /tls/valkey.key
        - --tls-ca-cert-file /tls/ca.crt
        - --tls-auth-clients no
        - --tls-replication yes
        - --tls-cluster yes
        - --cluster-enabled yes
        #- --cluster-announce-ip $(POD_IP)
        - --cluster-announce-hostname $(POD_NAME).valkey-replicas.valkey.svc.cluster.local
        - --cluster-config-file /data/nodes.conf
        - --cluster-node-timeout 15000
        - --appendonly yes
        - --requirepass $(REDISCLI_AUTH)
        - --masterauth $(REDISCLI_AUTH)
        resources:
          requests:
            cpu: "100m"
            memory: "100Mi"
        ports:
        - name: valkey
          containerPort: 6379
          protocol: "TCP"
        - name: cluster
          containerPort: 16379
          protocol: "TCP"
        volumeMounts:
        - name: data
          mountPath: /data
          readOnly: false
        - name: tls
          mountPath: /tls/ca.crt
          subPath: "ca.crt"
          readOnly: true
        - name: tls
          mountPath: /tls/valkey.crt
          subPath: "valkey.crt"
          readOnly: true
        - name: tls
          mountPath: /tls/valkey.key
          subPath: "valkey.key"
          readOnly: true
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - exec valkey-cli --tls --cacert /tls/ca.crt ping
          failureThreshold: 10
          initialDelaySeconds: 10
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec valkey-cli --tls --cacert /tls/ca.crt ping
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec valkey-cli --tls --cacert /tls/ca.crt ping
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: valkey-cluster
  namespace: valkey
spec:
  clusterIP: None
  ports:
  - name: valkey-port
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    app: valkey
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: valkey-masters
  namespace: valkey
spec:
  clusterIP: None
  ports:
  - name: valkey-port
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    app: valkey
    appCluster: valkey-masters
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: valkey-replicas
  namespace: valkey
spec:
  clusterIP: None
  ports:
  - name: valkey-port
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    app: valkey
    appCluster: valkey-replicas
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: valkey
  namespace: valkey
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: valkey
