---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-client
  namespace: redis
data:
  requirements.txt: |+
    redis
    locust
  locustfile.py: |+
    import os
    import time
    from random import randint
    from locust import between, task, User, events, tag, constant_throughput
    from redis.cluster import RedisCluster

    class redisLocust(User):
        wait_time = constant_throughput(50)
        host = "redis-cluster.redis.svc.cluster.local"

        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            self.client = redisClient(host=self.host)

        def on_stop(self):
            self.client.close()

        @task
        @tag("set")
        def set_value(self):
            self.client.set_value("set_value")

        @task
        @tag("get")
        def get_value(self):
            self.client.get_value("get_value")

    class redisClient:
        def __init__(self, host, *args, **kwargs):
            self.password = os.environ.get('REDISCLI_AUTH')
            self.host = host
            tls_config = {
                'ssl': True,
                'ssl_cert_reqs': 'none',  # Insecure; use proper certs in production
            }
            self.vc = RedisCluster(
                host=self.host,
                port=6379,
                password=self.password,
                username="default",
                cluster_error_retry_attempts=0,
                socket_timeout=2,
                keepalive=1,
                **tls_config
            )

        def close(self):
            self.vc.close()

        def set_value(self, key, command='SET'):
            start_time = time.perf_counter()
            ttl = 60
            try:
                result = self.vc.set(randint(0, 1000), randint(0, 1000), ex=ttl)
                if not result:
                    result = ''
                length = len(str(result))
                total_time = (time.perf_counter() - start_time) * 1000
                events.request.fire(
                    request_type=command,
                    name=key,
                    response_time=total_time,
                    response_length=length,
                )
            except Exception as e:
                total_time = (time.perf_counter() - start_time) * 1000
                events.request.fire(
                    request_type=command,
                    name=key,
                    response_time=total_time,
                    response_length=0,
                    exception=e
                )
                result = ''
            return result

        def get_value(self, key, command='GET'):
            start_time = time.perf_counter()
            try:
                result = self.vc.get(randint(0, 1000))
                if not result:
                    result = ''
                length = len(str(result))
                total_time = (time.perf_counter() - start_time) * 1000
                events.request.fire(
                    request_type=command,
                    name=key,
                    response_time=total_time,
                    response_length=length,
                )
            except Exception as e:
                total_time = (time.perf_counter() - start_time) * 1000
                events.request.fire(
                    request_type=command,
                    name=key,
                    response_time=total_time,
                    response_length=0,
                    exception=e
                )
                result = ''
            return result

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-client
  namespace: redis
spec:
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: redis-client
  template:
    metadata:
      labels:
        app: redis-client
    spec:
      terminationGracePeriodSeconds: 20
      containers:
      - name: redis-client
        image: "python:3.10-slim-bullseye"
        workingDir: /locust
        command:
          - sh
          - -c
          - |
            # shutdown() {
            #   kill -TERM "$pid"
            #   wait "$pid"
            #   exit 0
            # }
            # trap 'shutdown' SIGINT SIGTERM
            # sleep infinity &
            # pid=$!
            # wait "$pid"
            pip install --upgrade pip && pip install --no-cache-dir -r requirements.txt
            exec locust --processes 4
        env:
        - name: TZ
          value: America/Sao_Paulo
        envFrom:
        - secretRef:
            name: redis-pass
        volumeMounts:
        - name: locust
          mountPath: /locust
          readOnly: false
      volumes:
      - name: locust
        configMap:
          name: redis-client