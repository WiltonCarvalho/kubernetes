stages:
  - pre_build
  - build

workflow:
  rules:
    - if: $CI_COMMIT_TAG =~ '/^v\d+\.\d+\.\d+$/' || $CI_COMMIT_BRANCH == 'main'
      changes:
        - .gitlab-ci.yml

.dind-service:
  services:
    - name: docker:25-dind
      variables:
        DOCKER_TLS_CERTDIR: /$CI_BUILDS_DIR/certs
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: /$CI_BUILDS_DIR/certs/client
  before_script:
    - echo "[$(date)] Wait for Docker startup"
    - |
      tries=0
      d_timeout=60
      until docker info >/dev/null 2>&1; do
        if [ "$tries" -gt "$d_timeout" ]; then
          echo "[$(date)] Timed out trying to connect to dockerd" >&2;
          exit 1;
        fi
        tries=$(( $tries + 1 ));
        sleep 1;
      done
    - echo "[$(date)] Docker started"

.dind:
  image:
    name: docker:24-dind
    entrypoint: ["/bin/ash", "-c"]
  before_script:
    - sed -i '/# Mount \/tmp/,+3d' /usr/local/bin/dind
    - sed -i '/:2375/,1d' /usr/local/bin/dockerd-entrypoint.sh
    - export TINI_SUBREAPER=
    - export DOCKER_TLS_CERTDIR=
    - export DOCKER_TLS_VERIFY=
    - export DOCKER_HOST=unix:///var/run/docker.sock
    - nohup dockerd-entrypoint.sh --insecure-registry=registry.172.19.255.201.sslip.io &
    - echo "[$(date)] Wait for Docker startup"
    - |
      tries=0
      d_timeout=60
      until docker info >/dev/null 2>&1; do
        if [ "$tries" -gt "$d_timeout" ]; then
          echo "[$(date)] Timed out trying to connect to dockerd" >&2;
          exit 1;
        fi
        tries=$(( $tries + 1 ));
        sleep 1;
      done
    - echo "[$(date)] Docker started"

cache_test:
  stage: pre_build
  image:
    name: docker:24-dind
    entrypoint: ["/bin/ash", "-c"]
  script:
    - |
      mkdir -p node_modules
      ls -lh node_modules/
      echo test > node_modules/package.json
  cache:
    key: $CI_PROJECT_NAME-cache
    paths:
      - node_modules/
    policy: pull-push

build:
  stage: build
  extends:
    - .dind-service
  script:
    - env
    - apk add --no-cache --update git skopeo
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login https://$CI_REGISTRY -u "$CI_REGISTRY_USER" --password-stdin
    - IMAGE_TAG="${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}"
    - docker pull alpine:3.19
    - docker tag alpine:3.19 $CI_REGISTRY_IMAGE:$IMAGE_TAG
    # - docker build -t $CI_REGISTRY_IMAGE:$IMAGE_TAG . --progress=plain
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG
    - echo "$CI_REGISTRY_PASSWORD" | skopeo login --tls-verify=false https://$CI_REGISTRY -u "$CI_REGISTRY_USER" --password-stdin
    - skopeo copy --src-tls-verify=false --dest-tls-verify=false docker://docker.io/library/alpine:3.20 docker://$CI_REGISTRY_IMAGE:3.20
    - |
      ls -lh node_modules/
      echo test > node_modules/package.lock
  cache:
    key: $CI_PROJECT_NAME-cache
    paths:
      - node_modules/
    policy: pull